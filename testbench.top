library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity testbench_top is
end testbench_top;

architecture sim of testbench_top is

    component top
        generic(
            clk_freq  : integer := 100_000_000;
            baud_rate : integer := 115_200;
            stopbit   : integer := 2
        );
        port(
            start        : in  std_logic;
            clk          : in  std_logic;
            input        : in  std_logic_vector(7 downto 0);
            output       : out std_logic_vector(7 downto 0);
            parity_bit_tx: out std_logic;
            parity_bit_rx: out std_logic;
            done         : out std_logic
        );
    end component;

    -- Testbench signals
    signal clk          : std_logic := '0';
    signal start        : std_logic := '0';
    signal input        : std_logic_vector(7 downto 0) := (others => '0');
    signal output       : std_logic_vector(7 downto 0);
    signal parity_bit_tx: std_logic;
    signal parity_bit_rx: std_logic;
    signal done         : std_logic;
    constant clk_period : time := 10 ns; -- 100 MHz clock

begin

   
    DUT: top
        generic map(
            clk_freq  => 100_000_000,
            baud_rate => 115_200,
            stopbit   => 2
        )
        port map(
            start         => start,
            clk           => clk,
            input         => input,
            output        => output,
            parity_bit_tx => parity_bit_tx,
            parity_bit_rx => parity_bit_rx,
            done          => done
        );


    P_CLKGEN : process begin

clk   <= '0';
wait for clk_period/2;
clk   <= '1';
wait for clk_period/2;

end process P_CLKGEN;

    stim_proc: process
    begin
        -- Initial values
        input <= x"55";       -- Test data (binary: 01010101)
        start <= '0';
        wait for clk_period*1000;

        -- Start UART transfer
        start <= '1';
        wait for clk_period;
        start <= '0';

       
        wait for clk_period*1000*15;

   
        input <= x"A4";
        start <= '1';
        wait for clk_period;
        start <= '0';

        wait for clk_period*1000*15;
       
        input <= x"BF";
        start <= '1';
        wait for clk_period;
        start <= '0';

        wait for clk_period*1000*15;
       
        input <= x"93";
        start <= '1';
        wait for clk_period;
        start <= '0';

        wait for clk_period*1000*15;

assert false
report "SIM DONE"
severity failure;
     
    end process stim_proc;

end sim;
