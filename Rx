library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Rx is

    generic(
    clk_freq :  integer := 100_000_000;
    baud_rate : integer := 115_200;      
    stopbit :   integer := 2
    );
   
    port(
    clk : in std_logic;
    received_bit : in std_logic;
    parity_in : in std_logic;
    received_byte : out std_logic_vector(7 downto 0);
    rx_done : out std_logic;
    parity_rx  : out std_logic
    );
 
   
end  Rx;

architecture Behavioral of Rx is

type states is (IDLE_STATE,
                START_STATE,
                RECEIVE_STATE,
                STOP_STATE);
               
constant bit_timer_lim : integer := clk_freq/baud_rate ;
constant half_bit_timer_lim : integer := (clk_freq/baud_rate)/2 ;
constant stop_bit_lim  : integer := (clk_freq/baud_rate)*stopbit ;

signal bit_timer     : integer range 0 to stop_bit_lim := 0 ;
signal bit_counter   : integer range 0 to 7 := 0 ;
signal shift_reg     : std_logic_vector(7 downto 0) := (others => '0');
signal state : states := IDLE_STATE ;
signal parity_s      : std_logic := '0';

begin

MAIN : process(clk) begin

if(rising_edge(clk)) then

case state is
       
       when IDLE_STATE =>
        parity_s <= '0';
        bit_timer <= 0;
        bit_counter <= 0;
        rx_done <='0';
       
        received_byte <= (others =>'1');
       
        if(received_bit ='0') then
            state <= START_STATE;
        end if;
       
       --------------------------  
       when START_STATE =>
       
       if(bit_timer = half_bit_timer_lim-1) then
           
            state <= RECEIVE_STATE;
            bit_timer <= 0;
            rx_done <='0';
     
      else
            bit_timer <= bit_timer+1;
           
       end if;
       --------------------------
       when  RECEIVE_STATE =>
       
       if (bit_timer = bit_timer_lim-1) then
 
                    if (bit_counter=7) then
                   
                        bit_counter             <= 0;
                        state                   <= STOP_STATE;
                      else
                        bit_counter             <= bit_counter +1;                  
                      end if;
                       
                       shift_reg <= received_bit & shift_reg(7 downto 1);
                       bit_timer <= 0 ;
                           
       else                   
                        bit_timer               <= bit_timer + 1;                         
          end if;             
       --------------------------
       when STOP_STATE =>
         
        if(bit_timer = bit_timer_lim-1) then
           
            rx_done <= '1';
            state <= IDLE_STATE;
            bit_timer <= 0;
                parity_s <= shift_reg(0) xor shift_reg(1) xor shift_reg(2) xor shift_reg(3) xor
                shift_reg(4) xor shift_reg(5) xor shift_reg(6) xor shift_reg(7);
        else
            bit_timer <= bit_timer+1;
   
       end if;
         
end case;

received_byte <= shift_reg;
parity_rx <= parity_s;
end if;
end process;
end Behavioral;
